#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#
# Repeats requests saved in text file.
# Not tested in a proper way bugs may be anywhere 8(
#
__author__ = '090h'
__license__ = 'GPL'

from sys import argv, exit, exc_info
from os import path
from pprint import pprint
from requests import request
import logging

req_without_body = ['GET', 'DELETE']
req_with_body = ['POST', 'PUT', 'UPDATE']
known_req_types = req_with_body + req_without_body


def header2dict(data):
    headers = {}
    for line in filter(lambda x: x.find(':') != -1, data.split('\r\n')):
        key, value = line.split(': ')
        headers[key] = value
    return headers


def send_request(method, url, body=None):
    #print('Quering %s %s' % (method, url))
    if body is None:
        response = request(method, url, timeout=5, verify=False)
        #response = request(method, url, timeout=5, config={'danger_mode': True})
    else:
        response = request(method, url, data=body, timeout=5, verify=False)
        #response = request(method, url, data=body, timeout=5, config={'danger_mode': True})
    print('Status: %s' % response.status_code)
    print('Encoding: %s' % response.encoding)
    print('Text: %s' % response.text)


def txt_to_requests(filename):
    if not path.exists(filename):
        print('File %s does not exist!' % filename)
        return

    req_list = filter(lambda x: len(x) > 10, open(filename, 'rb').read().split('\r\n\r\n\r\n\r\n'))
    # pprint(req_list)
    for req in req_list:

        if req.startswith('\r\n\r\n'):
            req = req[4:]

        if req.startswith('\r\n'):
            req = req[2:]
        logging.debug('Request:\n%s' % req)

        first_line = req.split('\r\n')[0]
        logging.debug('First line: %s' % first_line)
        method, url, http_ver = first_line.split(' ')
        logging.debug('Method: %s' % method)
        logging.debug('Url: %s' % url)

        if method not in known_req_types:
            logging.error('Unknown request type found: %s' % method)
            logging.debug(req)

        if method in req_with_body:
            header_text, body = req.split('\r\n\r\n')
        else:
            header_text = req
            body = None

        headers = header2dict(header_text)
        logging.debug('Headers:\n', headers)
        #pprint(headers)

        url = 'https://%s%s' % (headers['Host'], url)
        print('%s %s' % (method, url))
        #print(body)
        #raw_input()
        try:
            send_request(method, url, body)
        except Exception:
            logging.error('Error while sending request!')
            logging.error(exc_info())

if __name__ == '__main__':
    if len(argv) == 1:
        print('usage:\n\t%s <filename.txt> [debug]' % argv[0])
        exit(1)

    if len(argv) == 3 and argv[2].lower() == 'debug':
        logging.basicConfig(level=logging.DEBUG)

    txt_to_requests(argv[1])